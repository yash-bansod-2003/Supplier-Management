generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

enum UserRole {
  ADMIN
  SUPPLIER
  ORGANIZATION
}

model User {
  id                 String      @id @default(cuid())
  name               String?
  email              String?     @unique
  emailVerified      DateTime?
  image              String?
  address            Address?
  role               UserRole    @default(SUPPLIER)
  isRoleUpdated      Boolean     @default(false)
  accounts           Account[]
  sessions           Session[]
  products           Product[]
  warehouses         Warehouse[]
  inventories        Inventory[]
  documents          Document[]
  organizationOrders Order[]     @relation("organization")
  supplierOrders     Order[]     @relation("supplier")
  createdAt          DateTime    @default(now()) @map(name: "created_at")
  updatedAt          DateTime    @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model Document {
  id          String  @id @default(cuid())
  name        String
  description String?
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id])
  files       File[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
}

model Address {
  id         String   @id @default(cuid())
  street     String
  city       String
  state      String
  postalCode String
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map("addresses")
}

model Warehouse {
  id          String      @id @default(cuid())
  name        String
  location    String
  capacity    Int
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Inventories Inventory[]
  createdAt   DateTime    @default(now()) @map(name: "created_at")
  updatedAt   DateTime    @default(now()) @map(name: "updated_at")

  @@map("warehouses")
}

model Inventory {
  id           String     @id @default(cuid())
  quantity     Int
  location     String
  reorderPoint Int
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  products     Product[]
  warehouseId  String?
  Warehouse    Warehouse? @relation(fields: [warehouseId], references: [id])
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime   @default(now()) @map(name: "updated_at")

  @@map("inventories")
}

enum Units {
  GRAM
  KILOGRAM
  LITER
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  category    String
  weight      Float
  unit        Units     @default(GRAM)
  cost        Float
  color       String
  quantity    Int
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  inventoryId String
  Inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @default(now()) @map(name: "updated_at")
  orders      Order[]

  @@map("products")
}

model Order {
  id             String   @id @default(cuid())
  subtotal       Int
  shipping       Int
  quantity       Int
  total          Int
  tax            Int
  organizationId String
  supplierId     String
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @map(name: "updated_at")

  organization User    @relation("organization", fields: [organizationId], references: [id])
  supplier     User    @relation("supplier", fields: [supplierId], references: [id])
  productId    String
  product      Product @relation(fields: [productId], references: [id])

  @@map(name: "orders")
}

model File {
  id           String   @id @default(cuid())
  metadate     Json?
  path         Json?
  pathOrder    String[]
  size         Float
  thumbnailUrl String?
  uploadedAt   DateTime @default(now()) @map(name: "uploaded_at")
  url          String
  documentId   String
  document     Document @relation(fields: [documentId], references: [id])

  @@map("files")
}
